plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "fabric_version", project.fabric_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "fabric_version": project.fabric_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

curseforge {
    apiKey = project.findProperty('curseforge_apikey') ?: '0'
    project {
        id = project.curseforge_projectId
        releaseType = 'release'
        addGameVersion project.minecraft_version
        addGameVersion 'Fabric'
        changelogType = 'markdown'
        changelog = "[View changelog on GitHub](${project.changelog_url}#${project.version})"

        mainArtifact(remapJar) {
            displayName = "${project.display_name} ${project.version}"

            relations {
                requiredDependency 'fabric-api'
            }
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

import com.modrinth.minotaur.dependencies.ModDependency
modrinth {
    token = project.findProperty('modrinth_token')
    projectId = project.modrinth_projectId
    versionNumber = project.version
    versionName = "${project.display_name} ${project.version}"
    uploadFile = remapJar
    changelog = "[View changelog on GitHub](${project.changelog_url}#${project.version})"
    gameVersions = [project.minecraft_version]
    loaders = ["fabric"]
    dependencies = [
            new ModDependency("P7dR8mSH", "required")
    ]
}

task upload(dependsOn: [tasks.curseforge, tasks.modrinth]) {
    group = 'upload'
    description = 'Upload the new version of the file to CurseForge and Modrinth'
}
